import streamlit as st
import subprocess
import tempfile
import os
import openai
from openai import OpenAI
from io import StringIO
from pylint.reporters.text import TextReporter
import pylint.lint

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY") or "your-api-key-here")

st.set_page_config(page_title="üß™ CodeGrader AI (stdin)", layout="centered")
st.title("üì• Goderew")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
tasks = {
    "–ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç": {
        "text": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ü—Ä–∏–≤–µ—Ç, [–∏–º—è]! –¢–µ–±–µ —É–∂–µ [–≤–æ–∑—Ä–∞—Å—Ç] –ª–µ—Ç!'.",
        "input": "–ê–π–¥–∞–Ω–∞\n14",
        "output": "–ü—Ä–∏–≤–µ—Ç, –ê–π–¥–∞–Ω–∞! –¢–µ–±–µ —É–∂–µ 14 –ª–µ—Ç!",
        "type": "stdin"
    },
    "–°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª": {
        "text": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å—É–º–º—É.",
        "input": "3\n4",
        "output": "7",
        "type": "stdin"
    },
    "–ß—ë—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ": {
        "text": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ, –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "input": "7",
        "output": "–ù–µ—á—ë—Ç–Ω–æ–µ",
        "type": "stdin"
    },
    "–ì–∏–ø–æ—Ç–µ–Ω—É–∑–∞": {
        "text": "–í—ã—á–∏—Å–ª–∏ –¥–ª–∏–Ω—É –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—Ç–µ—Ç–∞–º a –∏ b —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—è math.",
        "input": "3\n4",
        "output": "5.0",
        "type": "stdin"
    },
    "–§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞": {
        "text": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ n (n!).",
        "input": "5",
        "output": "120",
        "type": "stdin"
    },
    "–ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤ (NLTK)": {
        "text": "–†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é count_word_frequencies(text), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Tokenization –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ NLTK.",
        "input": "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä. –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞!",
        "output": "{'–ü—Ä–∏–≤–µ—Ç': 2, '–º–∏—Ä': 1, '—Å–Ω–æ–≤–∞': 1}",
        "type": "function",
        "function_name": "count_word_frequencies"
    }
}

# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
task_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", list(tasks.keys()))
task = tasks[task_name]
st.markdown(f"### üß© –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:\n{task['text']}")

# –í–≤–æ–¥ –∫–æ–¥–∞
code = st.text_area("‚úèÔ∏è –í–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–¥:", height=300)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∑–∞–¥–∞—á–∏
def_input = task["input"]
def_output = task["output"]
test_input = st.text_area("üì• –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è input():", value=def_input)
expected_output = st.text_input("üì§ –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:", value=def_output)

# –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
col1, col2, col3 = st.columns(3)
run_basic = col1.button("‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
run_with_style = col2.button("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ —Å—Ç–∏–ª–µ–º")
run_with_gpt = col3.button("ü§ñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å GPT-–ø–æ–º–æ—â—å—é")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
def execute_code(code_text, test_input_text):
    with tempfile.NamedTemporaryFile(suffix=".py", delete=False, mode="w", encoding="utf-8") as tmp:
        tmp.write(code_text)
        tmp_path = tmp.name
    try:
        result = subprocess.run(
            ["python", tmp_path],
            input=test_input_text,
            text=True,
            capture_output=True,
            timeout=5
        )
        actual_output = result.stdout.strip()
    except subprocess.TimeoutExpired:
        st.error("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª.")
        return None, tmp_path
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        return None, tmp_path
    return actual_output, tmp_path

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
if run_basic:
    output, tmp_path = execute_code(code, test_input)
    if output is not None:
        if output == expected_output:
            st.success("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ! –í—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            st.text(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_output}\n–ü–æ–ª—É—á–µ–Ω–æ: {output}")
    os.remove(tmp_path)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∏–ª—è
if run_with_style:
    output, tmp_path = execute_code(code, test_input)
    if output is not None:
        if output == expected_output:
            st.success("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ! –í—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            st.text(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_output}\n–ü–æ–ª—É—á–µ–Ω–æ: {output}")

    st.markdown("### üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è (pylint)")
    pylint_output = StringIO()
    reporter = TextReporter(output=pylint_output)
    try:
        pylint.lint.Run([tmp_path], reporter=reporter, exit=False)
        st.text(pylint_output.getvalue())
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ pylint: {e}")
    os.remove(tmp_path)

# –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å GPT
if run_with_gpt:
    output, tmp_path = execute_code(code, test_input)
    if output is not None:
        if output == expected_output:
            st.success("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ! –í—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º.")
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
            st.text(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_output}\n–ü–æ–ª—É—á–µ–Ω–æ: {output}")

    st.markdown("### üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è (pylint)")
    pylint_output = StringIO()
    reporter = TextReporter(output=pylint_output)
    try:
        pylint.lint.Run([tmp_path], reporter=reporter, exit=False)

        st.text(pylint_output.getvalue())
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ pylint: {e}")

    st.markdown("### üí¨ –°–æ–≤–µ—Ç—ã –æ—Ç GPT")
    try:
        prompt = f"""
        –°—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É:
        {task['text']}

        –ï–≥–æ –∫–æ–¥:
        {code}

        –ü–æ–¥—Å–∫–∞–∂–∏, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å.
        """
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        )
        st.markdown(response.choices[0].message.content)
    except Exception as e:
        st.warning(f"GPT –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: {e}")
    os.remove(tmp_path)